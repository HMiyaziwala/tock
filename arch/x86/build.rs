// Licensed under the Apache License, Version 2.0 or the MIT License.
// SPDX-License-Identifier: Apache-2.0 OR MIT
// Copyright Tock Contributors 2024.

use std::env;
use std::fmt::Write;
use std::fs;
use std::path::Path;

/// Returns `true` if the specified interrupt produces an error code.
fn has_error_code(num: u32) -> bool {
    matches!(num, 8 | 10..=14 | 17 | 21)
}

/// Generates an assembly file containing interrupt handler stubs.
///
/// See src/interrupts/idt.rs for more information.
fn gen_handler_stubs(path: &Path) {
    // We want the generated .s file to be readable
    #![allow(clippy::writeln_empty_string)]

    let mut contents = String::new();

    writeln!(
        contents,
        "# Interrupt handler stubs. Auto-generated by build.rs."
    )
    .unwrap();
    writeln!(contents, "").unwrap();
    writeln!(contents, ".section .text").unwrap();

    for i in 0..256 {
        writeln!(contents, "").unwrap();

        // Alignment ensures each stub is a predictable size.
        writeln!(contents, ".align 16").unwrap();

        // Only need to export symbols for the first two stubs. Using these we can compute the
        // address of all the rest.
        if i == 0 || i == 1 {
            writeln!(contents, ".global handler_stub_{i}").unwrap();
            writeln!(contents, "handler_stub_{i}:").unwrap();
        }

        // On x86, an error code is automatically pushed onto the stack for some exceptions. For all
        // other interrupt numbers, we manually push a placeholder onto the stack. This simplifies
        // the common interrupt handler.
        if !has_error_code(i) {
            writeln!(contents, "  push 0").unwrap();
        }

        writeln!(contents, "  push {i}").unwrap();

        writeln!(contents, "  jmp handler_entry").unwrap();
    }

    fs::write(path, contents).unwrap();
}

fn main() {
    let out_dir = env::var("OUT_DIR").unwrap();
    let out_dir = Path::new(&out_dir);

    let handler_stubs = out_dir.join("handler_stubs.s");
    gen_handler_stubs(&handler_stubs);
}
